{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/pages/products/[tag].js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport Products from \"../../Components/ProductList\";\nimport { wrapper as storeWrapper } from \"../../store-thunk/store\";\nimport { productsActions } from \"../../store-thunk/products\";\nimport { API_URL } from \"../../config\";\n\nfunction ProductsPage({\n  products\n}) {\n  return /*#__PURE__*/_jsxDEV(Products, {\n    products: products\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n} // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/common/categories\"\n  }).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    return error;\n  });\n  const categories = await res.categories; // Get the paths we want to pre-render based on posts\n\n  const paths = [];\n  categories.forEach(category => {\n    if (category.value) {\n      paths.push({\n        params: {\n          tag: category.value\n        }\n      });\n    }\n  }); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   const res = await axios({\n//     method: \"get\",\n//     url: API_URL + \"/feed/products\",\n//     params: {\n//       category_slug: params.tag,\n//     },\n//   })\n//     .then(function (response) {\n//       return response.data;\n//     })\n//     .catch(function (error) {\n//       return error;\n//     });\n//   const products = await res.products;\n//   // Pass post data to the page via props\n//   return { props: { products } };\n// }\n\nexport const getStaticProps = storeWrapper.getStaticProps(async ({\n  params,\n  store\n}) => {\n  // const res = await store.dispatch(\n  //   productsActions.fetchProducts({\n  //     params: {\n  //       category_slug: params.tag,\n  //     },\n  //   })\n  // );\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/feed/products\",\n    params: {\n      category_slug: params.tag\n    }\n  }).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    return error;\n  });\n  const products = await res.products; //\n\n  console.log(\"eeeeeeeeeeeeeeeeeeeeee\", products); // const products = await res.products;\n\n  await store.dispatch(productsActions.fetchProductsSuccess(products));\n  console.log(\"aaaaaaaaaaaaaaaaaaaaaa\", store.getState());\n  return {\n    props: {\n      products: []\n    }\n  };\n});\n\nconst mapStateToprops = state => {\n  return {// products: [],\n  };\n};\n\nexport default connect(mapStateToprops)(ProductsPage);","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/pages/products/[tag].js"],"names":["React","axios","connect","Products","wrapper","storeWrapper","productsActions","API_URL","ProductsPage","products","getStaticPaths","res","method","url","then","response","data","catch","error","categories","paths","forEach","category","value","push","params","tag","fallback","getStaticProps","store","category_slug","console","log","dispatch","fetchProductsSuccess","getState","props","mapStateToprops","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,SAASC,OAAO,IAAIC,YAApB,QAAwC,yBAAxC;AACA,SAASC,eAAT,QAAgC,4BAAhC;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAClC,sBAAO,QAAC,QAAD;AAAU,IAAA,QAAQ,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMV,KAAK,CAAC;AACtBW,IAAAA,MAAM,EAAE,KADc;AAEtBC,IAAAA,GAAG,EAAEN,OAAO,GAAG;AAFO,GAAD,CAAL,CAIfO,IAJe,CAIV,UAAUC,QAAV,EAAoB;AACxB,WAAOA,QAAQ,CAACC,IAAhB;AACD,GANe,EAOfC,KAPe,CAOT,UAAUC,KAAV,EAAiB;AACtB,WAAOA,KAAP;AACD,GATe,CAAlB;AAUA,QAAMC,UAAU,GAAG,MAAMR,GAAG,CAACQ,UAA7B,CAZqC,CAcrC;;AACA,QAAMC,KAAK,GAAG,EAAd;AACAD,EAAAA,UAAU,CAACE,OAAX,CAAoBC,QAAD,IAAc;AAC/B,QAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClBH,MAAAA,KAAK,CAACI,IAAN,CAAW;AACTC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAEJ,QAAQ,CAACC;AAAhB;AADC,OAAX;AAGD;AACF,GAND,EAhBqC,CAwBrC;AACA;;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASO,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAGvB,YAAY,CAACuB,cAAb,CAA4B,OAAO;AAAEH,EAAAA,MAAF;AAAUI,EAAAA;AAAV,CAAP,KAA6B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMlB,GAAG,GAAG,MAAMV,KAAK,CAAC;AACtBW,IAAAA,MAAM,EAAE,KADc;AAEtBC,IAAAA,GAAG,EAAEN,OAAO,GAAG,gBAFO;AAGtBkB,IAAAA,MAAM,EAAE;AACNK,MAAAA,aAAa,EAAEL,MAAM,CAACC;AADhB;AAHc,GAAD,CAAL,CAOfZ,IAPe,CAOV,UAAUC,QAAV,EAAoB;AACxB,WAAOA,QAAQ,CAACC,IAAhB;AACD,GATe,EAUfC,KAVe,CAUT,UAAUC,KAAV,EAAiB;AACtB,WAAOA,KAAP;AACD,GAZe,CAAlB;AAaA,QAAMT,QAAQ,GAAG,MAAME,GAAG,CAACF,QAA3B,CAtBqF,CAwBrF;;AAEAsB,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCvB,QAAtC,EA1BqF,CA4BrF;;AAEA,QAAMoB,KAAK,CAACI,QAAN,CAAe3B,eAAe,CAAC4B,oBAAhB,CAAqCzB,QAArC,CAAf,CAAN;AAEAsB,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,KAAK,CAACM,QAAN,EAAtC;AAEA,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAAE3B,MAAAA,QAAQ,EAAE;AAAZ;AAAT,GAAP;AACD,CAnC6B,CAAvB;;AAqCP,MAAM4B,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO,CACL;AADK,GAAP;AAGD,CAJD;;AAMA,eAAepC,OAAO,CAACmC,eAAD,CAAP,CAAyB7B,YAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\n\nimport Products from \"../../Components/ProductList\";\n\nimport { wrapper as storeWrapper } from \"../../store-thunk/store\";\nimport { productsActions } from \"../../store-thunk/products\";\n\nimport { API_URL } from \"../../config\";\n\nfunction ProductsPage({ products }) {\n  return <Products products={products} />;\n}\n\n// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/common/categories\",\n  })\n    .then(function (response) {\n      return response.data;\n    })\n    .catch(function (error) {\n      return error;\n    });\n  const categories = await res.categories;\n\n  // Get the paths we want to pre-render based on posts\n  const paths = [];\n  categories.forEach((category) => {\n    if (category.value) {\n      paths.push({\n        params: { tag: category.value },\n      });\n    }\n  });\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n}\n\n// This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   const res = await axios({\n//     method: \"get\",\n//     url: API_URL + \"/feed/products\",\n//     params: {\n//       category_slug: params.tag,\n//     },\n//   })\n//     .then(function (response) {\n//       return response.data;\n//     })\n//     .catch(function (error) {\n//       return error;\n//     });\n//   const products = await res.products;\n\n//   // Pass post data to the page via props\n//   return { props: { products } };\n// }\n\nexport const getStaticProps = storeWrapper.getStaticProps(async ({ params, store }) => {\n  // const res = await store.dispatch(\n  //   productsActions.fetchProducts({\n  //     params: {\n  //       category_slug: params.tag,\n  //     },\n  //   })\n  // );\n\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/feed/products\",\n    params: {\n      category_slug: params.tag,\n    },\n  })\n    .then(function (response) {\n      return response.data;\n    })\n    .catch(function (error) {\n      return error;\n    });\n  const products = await res.products;\n\n  //\n\n  console.log(\"eeeeeeeeeeeeeeeeeeeeee\", products);\n\n  // const products = await res.products;\n\n  await store.dispatch(productsActions.fetchProductsSuccess(products));\n\n  console.log(\"aaaaaaaaaaaaaaaaaaaaaa\", store.getState());\n\n  return { props: { products: [] } };\n});\n\nconst mapStateToprops = (state) => {\n  return {\n    // products: [],\n  };\n};\n\nexport default connect(mapStateToprops)(ProductsPage);\n"]},"metadata":{},"sourceType":"module"}