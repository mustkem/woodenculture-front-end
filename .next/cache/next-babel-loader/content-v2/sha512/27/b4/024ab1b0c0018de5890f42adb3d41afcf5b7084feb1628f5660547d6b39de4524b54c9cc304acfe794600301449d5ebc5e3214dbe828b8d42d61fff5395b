{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as types from \"./types\";\nimport { fetchSubCategories as fetchSubCategoriesApi } from \"./api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchSubCategories(payload) {\n  try {\n    // do api call\n    const response = yield call(fetchSubCategoriesApi, payload);\n    yield put({\n      type: types.FETCH_PRODUCTS_SUCCESS,\n      payload: response\n    });\n  } catch (error) {\n    yield put({\n      type: types.FETCH_PRODUCTS_SUCCESS,\n      error: error && error.message\n    });\n  }\n}\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nexport default function* homeSagas() {\n  yield takeLatest(types.FETCH_PRODUCTS, fetchSubCategories);\n}","map":null,"metadata":{},"sourceType":"module"}