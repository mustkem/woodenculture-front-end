{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from \"redux\";\nimport * as types from \"./types\";\nconst initialState = {\n  user: {\n    data: null,\n    loading: false,\n    error: null\n  }\n};\nconst duckData = {\n  loginModel: false\n};\nconst signupData = {\n  data: {\n    status: false\n  },\n  loading: true,\n  error: null\n};\n\nconst signup = (state = signupData, action) => {\n  switch (action.type) {\n    case types.SIGNUP:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: true,\n          error: null\n        });\n      }\n\n    case types.SIGNUP_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          data: action.payload\n        });\n      }\n\n    case types.SIGNUP_FAILED:\n      {\n        return {\n          data: action.payload,\n          loading: false,\n          error: action.error\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst user = (state = initialState.user, action) => {\n  switch (action.type) {\n    case types.LOGIN:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: true,\n          error: null\n        });\n      }\n\n    case types.LOGIN_SUCCESS:\n      {\n        console.log(\"test1\", action.payload);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          data: action.payload\n        });\n      }\n\n    case types.LOGIN_FAILED:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          error: action.error\n        });\n      }\n\n    case types.GET_USER_STATUS_SUCCESS:\n      {\n        console.log(\"test2\", action.payload);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.payload,\n          loading: false\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst duck = (state = duckData, action) => {\n  switch (action.type) {\n    case types.SET_LOGIN_MODEL:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loginModel: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const commonReducer = combineReducers({\n  user,\n  signup,\n  duck\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/woodenculture/woodenculture-front-end/store-thunk/common/reducers.js"],"names":["combineReducers","types","initialState","user","data","loading","error","duckData","loginModel","signupData","status","signup","state","action","type","SIGNUP","SIGNUP_SUCCESS","payload","SIGNUP_FAILED","LOGIN","LOGIN_SUCCESS","console","log","LOGIN_FAILED","GET_USER_STATUS_SUCCESS","duck","SET_LOGIN_MODEL","commonReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport * as types from \"./types\";\r\n\r\nconst initialState = {\r\n  user: {\r\n    data: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n};\r\n\r\nconst duckData = {\r\n  loginModel: false,\r\n};\r\n\r\nconst signupData = {\r\n  data: { status: false },\r\n  loading: true,\r\n  error: null,\r\n};\r\n\r\nconst signup = (state = signupData, action) => {\r\n  switch (action.type) {\r\n    case types.SIGNUP: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      };\r\n    }\r\n    case types.SIGNUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: action.payload,\r\n      };\r\n    }\r\n    case types.SIGNUP_FAILED: {\r\n      return {\r\n        data: action.payload,\r\n        loading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst user = (state = initialState.user, action) => {\r\n  switch (action.type) {\r\n    case types.LOGIN: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n\r\n        error: null,\r\n      };\r\n    }\r\n    case types.LOGIN_SUCCESS: {\r\n      console.log(\"test1\", action.payload);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: action.payload,\r\n      };\r\n    }\r\n    case types.LOGIN_FAILED: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n    case types.GET_USER_STATUS_SUCCESS: {\r\n      console.log(\"test2\", action.payload);\r\n\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        loading: false,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst duck = (state = duckData, action) => {\r\n  switch (action.type) {\r\n    case types.SET_LOGIN_MODEL: {\r\n      return {\r\n        ...state,\r\n        loginModel: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const commonReducer = combineReducers({\r\n  user,\r\n  signup,\r\n  duck,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}