{"ast":null,"code":"import _defineProperty from \"/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (false) {\n    var _require = require(\"redux-devtools-extension\"),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nvar reducer = function reducer(state, action) {\n  if (action.type === HYDRATE) {\n    var nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return nextState;\n  } else {\n    return rootReducer(state, action);\n  }\n}; // create the saga middleware\n\n\nvar sagaMiddleware = createSagaMiddleware();\n\nvar initStore = function initStore() {\n  var store = createStore(reducer, bindMiddleware([sagaMiddleware])); // then run the saga\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport var wrapper = createWrapper(initStore);","map":null,"metadata":{},"sourceType":"module"}