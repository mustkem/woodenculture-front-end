{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as types from \"./types\";\nimport { fetchProducts as fetchProductsApi } from \"./api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchProducts(payload) {\n  try {\n    // do api call\n    console.log(\"sagaaaaaaaaaaaaaaaaaaaa\");\n    const response = yield call(fetchProductsApi, payload);\n    yield put({\n      type: types.FETCH_PRODUCTS_SUCCESS,\n      payload: response\n    });\n  } catch (error) {\n    console.log(\"saga catchhhhhhhhhhhhhhhhhhhhhhhhhh\");\n    yield put({\n      type: types.FETCH_PRODUCTS_SUCCESS,\n      error: error && error.message\n    });\n  }\n}\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nexport default function* Sagas() {\n  yield takeLatest(types.FETCH_PRODUCTS, fetchProducts);\n}","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/store/products/sagas.js"],"names":["call","put","takeLatest","types","fetchProducts","fetchProductsApi","payload","console","log","response","type","FETCH_PRODUCTS_SUCCESS","error","message","Sagas","FETCH_PRODUCTS"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AAEA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASC,aAAa,IAAIC,gBAA1B,QAAkD,OAAlD,C,CAEA;;AACA,UAAUD,aAAV,CAAwBE,OAAxB,EAAiC;AAC/B,MAAI;AACF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACK,gBAAD,EAAmBC,OAAnB,CAA3B;AACA,UAAML,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEP,KAAK,CAACQ,sBADJ;AAERL,MAAAA,OAAO,EAAEG;AAFD,KAAD,CAAT;AAID,GARD,CAQE,OAAOG,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA,UAAMP,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEP,KAAK,CAACQ,sBADJ;AAERC,MAAAA,KAAK,EAAEA,KAAK,IAAIA,KAAK,CAACC;AAFd,KAAD,CAAT;AAID;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,UAAUC,KAAV,GAAkB;AAC/B,QAAMZ,UAAU,CAACC,KAAK,CAACY,cAAP,EAAuBX,aAAvB,CAAhB;AACD","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport * as types from \"./types\";\r\nimport { fetchProducts as fetchProductsApi } from \"./api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* fetchProducts(payload) {\r\n  try {\r\n    // do api call\r\n    console.log(\"sagaaaaaaaaaaaaaaaaaaaa\");\r\n    const response = yield call(fetchProductsApi, payload);\r\n    yield put({\r\n      type: types.FETCH_PRODUCTS_SUCCESS,\r\n      payload: response,\r\n    });\r\n  } catch (error) {\r\n    console.log(\"saga catchhhhhhhhhhhhhhhhhhhhhhhhhh\");\r\n    yield put({\r\n      type: types.FETCH_PRODUCTS_SUCCESS,\r\n      error: error && error.message,\r\n    });\r\n  }\r\n}\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nexport default function* Sagas() {\r\n  yield takeLatest(types.FETCH_PRODUCTS, fetchProducts);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}