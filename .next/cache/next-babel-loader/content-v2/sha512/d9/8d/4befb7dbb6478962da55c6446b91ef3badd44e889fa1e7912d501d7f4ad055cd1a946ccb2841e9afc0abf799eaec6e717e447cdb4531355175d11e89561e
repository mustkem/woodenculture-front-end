{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as types from \"./types\";\nimport { login as loginApi, signup as signupApi, getUserStatus as getUserStatusApi } from \"./api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* login(action) {\n  try {\n    // do api call\n    const response = yield call(loginApi, action.payload);\n    yield put({\n      type: types.LOGIN_SUCCESS,\n      payload: response\n    });\n  } catch (error) {\n    yield put({\n      type: types.LOGIN_FAILED,\n      error: error && error.message\n    });\n  }\n}\n\nfunction* signup(action) {\n  try {\n    // do api call\n    const response = yield call(signupApi, action.payload);\n    yield put({\n      type: types.SIGNUP_SUCCESS,\n      payload: response\n    });\n  } catch (error) {\n    yield put({\n      type: types.SIGNUP_FAILED,\n      error: error && error.message\n    });\n  }\n}\n\nfunction* getUserStatus(action) {\n  try {\n    // do api call\n    const response = yield call(getUserStatusApi, action.payload);\n    yield put({\n      type: types.GET_USER_STATUS_SUCCESS,\n      payload: response\n    });\n  } catch (error) {\n    yield put({\n      type: types.GET_USER_STATUS_FAILED,\n      error: error && error.message\n    });\n  }\n}\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nexport default function* commonSagas() {\n  yield takeLatest(types.LOGIN, login);\n  yield takeLatest(types.SIGNUP, signup);\n  yield takeLatest(types.GET_USER_STATUS, getUserStatus);\n}","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/store/common/sagas.js"],"names":["call","put","takeLatest","types","login","loginApi","signup","signupApi","getUserStatus","getUserStatusApi","action","response","payload","type","LOGIN_SUCCESS","error","LOGIN_FAILED","message","SIGNUP_SUCCESS","SIGNUP_FAILED","GET_USER_STATUS_SUCCESS","GET_USER_STATUS_FAILED","commonSagas","LOGIN","SIGNUP","GET_USER_STATUS"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AAEA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASC,KAAK,IAAIC,QAAlB,EAA4BC,MAAM,IAAIC,SAAtC,EAAiDC,aAAa,IAAIC,gBAAlE,QAA0F,OAA1F,C,CAEA;;AACA,UAAUL,KAAV,CAAgBM,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACK,QAAD,EAAWK,MAAM,CAACE,OAAlB,CAA3B;AACA,UAAMX,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,KAAK,CAACW,aADJ;AAERF,MAAAA,OAAO,EAAED;AAFD,KAAD,CAAT;AAID,GAPD,CAOE,OAAOI,KAAP,EAAc;AACd,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,KAAK,CAACa,YADJ;AAERD,MAAAA,KAAK,EAAEA,KAAK,IAAIA,KAAK,CAACE;AAFd,KAAD,CAAT;AAID;AACF;;AAED,UAAUX,MAAV,CAAiBI,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACO,SAAD,EAAYG,MAAM,CAACE,OAAnB,CAA3B;AACA,UAAMX,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,KAAK,CAACe,cADJ;AAERN,MAAAA,OAAO,EAAED;AAFD,KAAD,CAAT;AAID,GAPD,CAOE,OAAOI,KAAP,EAAc;AACd,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,KAAK,CAACgB,aADJ;AAERJ,MAAAA,KAAK,EAAEA,KAAK,IAAIA,KAAK,CAACE;AAFd,KAAD,CAAT;AAID;AACF;;AAED,UAAUT,aAAV,CAAwBE,MAAxB,EAAgC;AAC9B,MAAI;AACF;AACA,UAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACS,gBAAD,EAAmBC,MAAM,CAACE,OAA1B,CAA3B;AACA,UAAMX,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,KAAK,CAACiB,uBADJ;AAERR,MAAAA,OAAO,EAAED;AAFD,KAAD,CAAT;AAID,GAPD,CAOE,OAAOI,KAAP,EAAc;AACd,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,KAAK,CAACkB,sBADJ;AAERN,MAAAA,KAAK,EAAEA,KAAK,IAAIA,KAAK,CAACE;AAFd,KAAD,CAAT;AAID;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,UAAUK,WAAV,GAAwB;AACrC,QAAMpB,UAAU,CAACC,KAAK,CAACoB,KAAP,EAAcnB,KAAd,CAAhB;AACA,QAAMF,UAAU,CAACC,KAAK,CAACqB,MAAP,EAAelB,MAAf,CAAhB;AACA,QAAMJ,UAAU,CAACC,KAAK,CAACsB,eAAP,EAAwBjB,aAAxB,CAAhB;AACD","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport * as types from \"./types\";\r\nimport { login as loginApi, signup as signupApi, getUserStatus as getUserStatusApi } from \"./api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* login(action) {\r\n  try {\r\n    // do api call\r\n    const response = yield call(loginApi, action.payload);\r\n    yield put({\r\n      type: types.LOGIN_SUCCESS,\r\n      payload: response,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: types.LOGIN_FAILED,\r\n      error: error && error.message,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* signup(action) {\r\n  try {\r\n    // do api call\r\n    const response = yield call(signupApi, action.payload);\r\n    yield put({\r\n      type: types.SIGNUP_SUCCESS,\r\n      payload: response,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: types.SIGNUP_FAILED,\r\n      error: error && error.message,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* getUserStatus(action) {\r\n  try {\r\n    // do api call\r\n    const response = yield call(getUserStatusApi, action.payload);\r\n    yield put({\r\n      type: types.GET_USER_STATUS_SUCCESS,\r\n      payload: response,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: types.GET_USER_STATUS_FAILED,\r\n      error: error && error.message,\r\n    });\r\n  }\r\n}\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nexport default function* commonSagas() {\r\n  yield takeLatest(types.LOGIN, login);\r\n  yield takeLatest(types.SIGNUP, signup);\r\n  yield takeLatest(types.GET_USER_STATUS, getUserStatus);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}