{"ast":null,"code":"import _regeneratorRuntime from \"/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchProducts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(Sagas);\n\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as types from \"./types\";\nimport { fetchProducts as fetchProductsApi } from \"./api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction fetchProducts(payload) {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchProducts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // do api call\n          console.log(\"sagaaaaaaaaaaaaaaaaaaaa\");\n          _context.next = 4;\n          return call(fetchProductsApi, payload);\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return put({\n            type: types.FETCH_PRODUCTS_SUCCESS,\n            payload: response\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(\"saga catchhhhhhhhhhhhhhhhhhhhhhhhhh\");\n          _context.next = 14;\n          return put({\n            type: types.FETCH_PRODUCTS_SUCCESS,\n            error: _context.t0 && _context.t0.message\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nexport default function Sagas() {\n  return _regeneratorRuntime.wrap(function Sagas$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(types.FETCH_PRODUCTS, fetchProducts);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n_c = Sagas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sagas\");","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/store/products/sagas.js"],"names":["fetchProducts","Sagas","call","put","takeLatest","types","fetchProductsApi","payload","console","log","response","type","FETCH_PRODUCTS_SUCCESS","error","message","FETCH_PRODUCTS"],"mappings":";;oDAMUA,a;qDAyBeC,K;;AA/BzB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AAEA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASL,aAAa,IAAIM,gBAA1B,QAAkD,OAAlD,C,CAEA;;AACA,SAAUN,aAAV,CAAwBO,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAHJ;AAIqB,iBAAMP,IAAI,CAACI,gBAAD,EAAmBC,OAAnB,CAAV;;AAJrB;AAIUG,UAAAA,QAJV;AAAA;AAKI,iBAAMP,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEN,KAAK,CAACO,sBADJ;AAERL,YAAAA,OAAO,EAAEG;AAFD,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUIF,UAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAVJ;AAWI,iBAAMN,GAAG,CAAC;AACRQ,YAAAA,IAAI,EAAEN,KAAK,CAACO,sBADJ;AAERC,YAAAA,KAAK,EAAE,eAAS,YAAMC;AAFd,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAAUb,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,UAAU,CAACC,KAAK,CAACU,cAAP,EAAuBf,aAAvB,CAAhB;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;KAAUC,K","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport * as types from \"./types\";\r\nimport { fetchProducts as fetchProductsApi } from \"./api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* fetchProducts(payload) {\r\n  try {\r\n    // do api call\r\n    console.log(\"sagaaaaaaaaaaaaaaaaaaaa\");\r\n    const response = yield call(fetchProductsApi, payload);\r\n    yield put({\r\n      type: types.FETCH_PRODUCTS_SUCCESS,\r\n      payload: response,\r\n    });\r\n  } catch (error) {\r\n    console.log(\"saga catchhhhhhhhhhhhhhhhhhhhhhhhhh\");\r\n    yield put({\r\n      type: types.FETCH_PRODUCTS_SUCCESS,\r\n      error: error && error.message,\r\n    });\r\n  }\r\n}\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nexport default function* Sagas() {\r\n  yield takeLatest(types.FETCH_PRODUCTS, fetchProducts);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}