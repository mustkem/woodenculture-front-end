{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from \"redux\";\nimport * as types from \"./types\";\nconst initialState = {\n  user: {\n    data: null,\n    loading: false,\n    error: null\n  }\n};\nconst duckData = {\n  loginModel: false\n};\nconst signupData = {\n  data: {\n    status: false\n  },\n  loading: true,\n  error: null\n};\n\nconst signup = (state = signupData, action) => {\n  switch (action.type) {\n    case types.SIGNUP:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: true,\n          error: null\n        });\n      }\n\n    case types.SIGNUP_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          data: action.payload\n        });\n      }\n\n    case types.SIGNUP_FAILED:\n      {\n        return {\n          data: action.payload,\n          loading: false,\n          error: action.error\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst user = (state = initialState.user, action) => {\n  switch (action.type) {\n    case types.LOGIN:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: true,\n          error: null\n        });\n      }\n\n    case types.LOGIN_SUCCESS:\n      {\n        console.log(\"test1\", action.payload);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          data: action.payload\n        });\n      }\n\n    case types.LOGIN_FAILED:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          error: action.error\n        });\n      }\n\n    case types.GET_USER_STATUS_SUCCESS:\n      {\n        console.log(\"test2\", action.payload);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.payload,\n          loading: false\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst duck = (state = duckData, action) => {\n  switch (action.type) {\n    case types.SET_LOGIN_MODEL:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loginModel: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const commonReducer = combineReducers({\n  user,\n  signup,\n  duck\n});","map":null,"metadata":{},"sourceType":"module"}