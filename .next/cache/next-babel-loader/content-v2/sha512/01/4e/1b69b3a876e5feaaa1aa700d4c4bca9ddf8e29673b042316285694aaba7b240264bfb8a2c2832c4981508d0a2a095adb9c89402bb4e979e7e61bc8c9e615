{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport Products from \"../../Components/ProductList\";\nimport { wrapper as storeWrapper } from \"../../store-thunk/store\";\nimport { productsActions, productsApis } from \"../../store-thunk/products\";\nimport { API_URL } from \"../../config\";\n\nfunction ProductsPage({\n  products\n}) {\n  return /*#__PURE__*/_jsx(Products, {\n    products: products\n  });\n} // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/common/categories\"\n  }).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    return error;\n  });\n  const categories = await res.categories; // Get the paths we want to pre-render based on posts\n\n  const paths = [];\n  categories.forEach(category => {\n    if (category.value) {\n      paths.push({\n        params: {\n          tag: category.value\n        }\n      });\n    }\n  }); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   const res = await axios({\n//     method: \"get\",\n//     url: API_URL + \"/feed/products\",\n//     params: {\n//       category_slug: params.tag,\n//     },\n//   })\n//     .then(function (response) {\n//       return response.data;\n//     })\n//     .catch(function (error) {\n//       return error;\n//     });\n//   const products = await res.products;\n//   // Pass post data to the page via props\n//   return { props: { products } };\n// }\n\nexport const getStaticProps = storeWrapper.getStaticProps(async ({\n  params,\n  store\n}) => {\n  var _store$getState$produ;\n\n  await store.dispatch(productsApis.fetchProducts({\n    category_slug: params.tag\n  }));\n  return {\n    props: {\n      products: (_store$getState$produ = store.getState().products.fetchProducts.data) === null || _store$getState$produ === void 0 ? void 0 : _store$getState$produ.products\n    }\n  };\n});\n\nconst mapStateToprops = state => {\n  var _state$products$fetch;\n\n  return {\n    products: (_state$products$fetch = state.products.fetchProducts.data) === null || _state$products$fetch === void 0 ? void 0 : _state$products$fetch.products\n  };\n};\n\nexport default connect(mapStateToprops)(ProductsPage);","map":null,"metadata":{},"sourceType":"module"}