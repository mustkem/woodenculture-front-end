{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\woodenculture\\\\woodenculture-front-end\\\\pages\\\\products\\\\[tag].js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport Products from \"../../Components/ProductList\";\nimport { wrapper as storeWrapper } from \"../../store-thunk/store\";\nimport { productsActions, productsApis } from \"../../store-thunk/products\";\nimport { API_URL } from \"../../config\";\n\nfunction ProductsPage({\n  products\n}) {\n  return /*#__PURE__*/_jsxDEV(Products, {\n    products: products\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n} // This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios({\n    method: \"get\",\n    url: API_URL + \"/common/categories\"\n  }).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    return error;\n  });\n  const categories = await res.categories; // Get the paths we want to pre-render based on posts\n\n  const paths = [];\n  categories.forEach(category => {\n    if (category.value) {\n      paths.push({\n        params: {\n          tag: category.value\n        }\n      });\n    }\n  }); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   const res = await axios({\n//     method: \"get\",\n//     url: API_URL + \"/feed/products\",\n//     params: {\n//       category_slug: params.tag,\n//     },\n//   })\n//     .then(function (response) {\n//       return response.data;\n//     })\n//     .catch(function (error) {\n//       return error;\n//     });\n//   const products = await res.products;\n//   // Pass post data to the page via props\n//   return { props: { products } };\n// }\n\nexport const getStaticProps = storeWrapper.getStaticProps(async ({\n  params,\n  store\n}) => {\n  var _store$getState$produ;\n\n  await store.dispatch(productsApis.fetchProducts({\n    category_slug: params.tag\n  }));\n  return {\n    props: {\n      products: (_store$getState$produ = store.getState().products.fetchProducts.data) === null || _store$getState$produ === void 0 ? void 0 : _store$getState$produ.products\n    }\n  };\n});\n\nconst mapStateToprops = state => {\n  var _state$products$fetch;\n\n  return {\n    products: (_state$products$fetch = state.products.fetchProducts.data) === null || _state$products$fetch === void 0 ? void 0 : _state$products$fetch.products\n  };\n};\n\nexport default connect(mapStateToprops)(ProductsPage);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/woodenculture/woodenculture-front-end/pages/products/[tag].js"],"names":["React","axios","connect","Products","wrapper","storeWrapper","productsActions","productsApis","API_URL","ProductsPage","products","getStaticPaths","res","method","url","then","response","data","catch","error","categories","paths","forEach","category","value","push","params","tag","fallback","getStaticProps","store","dispatch","fetchProducts","category_slug","props","getState","mapStateToprops","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,SAASC,OAAO,IAAIC,YAApB,QAAwC,yBAAxC;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,4BAA9C;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAClC,sBAAO,QAAC,QAAD;AAAU,IAAA,QAAQ,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,GAAG,GAAG,MAAMX,KAAK,CAAC;AACtBY,IAAAA,MAAM,EAAE,KADc;AAEtBC,IAAAA,GAAG,EAAEN,OAAO,GAAG;AAFO,GAAD,CAAL,CAIfO,IAJe,CAIV,UAAUC,QAAV,EAAoB;AACxB,WAAOA,QAAQ,CAACC,IAAhB;AACD,GANe,EAOfC,KAPe,CAOT,UAAUC,KAAV,EAAiB;AACtB,WAAOA,KAAP;AACD,GATe,CAAlB;AAUA,QAAMC,UAAU,GAAG,MAAMR,GAAG,CAACQ,UAA7B,CAZqC,CAcrC;;AACA,QAAMC,KAAK,GAAG,EAAd;AACAD,EAAAA,UAAU,CAACE,OAAX,CAAoBC,QAAD,IAAc;AAC/B,QAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClBH,MAAAA,KAAK,CAACI,IAAN,CAAW;AACTC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAEJ,QAAQ,CAACC;AAAhB;AADC,OAAX;AAGD;AACF,GAND,EAhBqC,CAwBrC;AACA;;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASO,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAGxB,YAAY,CAACwB,cAAb,CAA4B,OAAO;AAAEH,EAAAA,MAAF;AAAUI,EAAAA;AAAV,CAAP,KAA6B;AAAA;;AACrF,QAAMA,KAAK,CAACC,QAAN,CACJxB,YAAY,CAACyB,aAAb,CAA2B;AACzBC,IAAAA,aAAa,EAAEP,MAAM,CAACC;AADG,GAA3B,CADI,CAAN;AAMA,SAAO;AAAEO,IAAAA,KAAK,EAAE;AAAExB,MAAAA,QAAQ,2BAAEoB,KAAK,CAACK,QAAN,GAAiBzB,QAAjB,CAA0BsB,aAA1B,CAAwCf,IAA1C,0DAAE,sBAA8CP;AAA1D;AAAT,GAAP;AACD,CAR6B,CAAvB;;AAUP,MAAM0B,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,SAAO;AACL3B,IAAAA,QAAQ,2BAAE2B,KAAK,CAAC3B,QAAN,CAAesB,aAAf,CAA6Bf,IAA/B,0DAAE,sBAAmCP;AADxC,GAAP;AAGD,CAJD;;AAMA,eAAeR,OAAO,CAACkC,eAAD,CAAP,CAAyB3B,YAAzB,CAAf","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Products from \"../../Components/ProductList\";\r\n\r\nimport { wrapper as storeWrapper } from \"../../store-thunk/store\";\r\nimport { productsActions, productsApis } from \"../../store-thunk/products\";\r\n\r\nimport { API_URL } from \"../../config\";\r\n\r\nfunction ProductsPage({ products }) {\r\n  return <Products products={products} />;\r\n}\r\n\r\n// This function gets called at build time\r\nexport async function getStaticPaths() {\r\n  // Call an external API endpoint to get posts\r\n  const res = await axios({\r\n    method: \"get\",\r\n    url: API_URL + \"/common/categories\",\r\n  })\r\n    .then(function (response) {\r\n      return response.data;\r\n    })\r\n    .catch(function (error) {\r\n      return error;\r\n    });\r\n  const categories = await res.categories;\r\n\r\n  // Get the paths we want to pre-render based on posts\r\n  const paths = [];\r\n  categories.forEach((category) => {\r\n    if (category.value) {\r\n      paths.push({\r\n        params: { tag: category.value },\r\n      });\r\n    }\r\n  });\r\n\r\n  // We'll pre-render only these paths at build time.\r\n  // { fallback: false } means other routes should 404.\r\n  return { paths, fallback: false };\r\n}\r\n\r\n// This also gets called at build time\r\n// export async function getStaticProps({ params }) {\r\n//   const res = await axios({\r\n//     method: \"get\",\r\n//     url: API_URL + \"/feed/products\",\r\n//     params: {\r\n//       category_slug: params.tag,\r\n//     },\r\n//   })\r\n//     .then(function (response) {\r\n//       return response.data;\r\n//     })\r\n//     .catch(function (error) {\r\n//       return error;\r\n//     });\r\n//   const products = await res.products;\r\n\r\n//   // Pass post data to the page via props\r\n//   return { props: { products } };\r\n// }\r\n\r\nexport const getStaticProps = storeWrapper.getStaticProps(async ({ params, store }) => {\r\n  await store.dispatch(\r\n    productsApis.fetchProducts({\r\n      category_slug: params.tag,\r\n    })\r\n  );\r\n\r\n  return { props: { products: store.getState().products.fetchProducts.data?.products } };\r\n});\r\n\r\nconst mapStateToprops = (state) => {\r\n  return {\r\n    products: state.products.fetchProducts.data?.products,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToprops)(ProductsPage);\r\n"]},"metadata":{},"sourceType":"module"}