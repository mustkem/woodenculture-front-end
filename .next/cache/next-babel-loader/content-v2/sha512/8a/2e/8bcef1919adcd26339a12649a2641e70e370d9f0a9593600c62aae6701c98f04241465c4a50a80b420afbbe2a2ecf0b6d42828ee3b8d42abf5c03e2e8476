{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\nimport createSagaMiddleware, { END } from \"redux-saga\";\nimport rootReducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return nextState;\n  } else {\n    return rootReducer(state, action);\n  }\n}; // create the saga middleware\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst initStore = () => {\n  const store = createStore(reducer, bindMiddleware([sagaMiddleware]));\n\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) return;\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga(); // dispatch saga tasks\n\n    tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n    await store.stopSaga(); // Re-run on client side\n\n    if (!isServer) {\n      store.runSaga();\n    }\n  }; // Initial run\n\n\n  store.runSaga();\n  return store;\n};\n\nexport const wrapper = createWrapper(initStore);","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/store/store.js"],"names":["createStore","applyMiddleware","HYDRATE","createWrapper","createSagaMiddleware","END","rootReducer","rootSaga","bindMiddleware","middleware","composeWithDevTools","require","reducer","state","action","type","nextState","payload","sagaMiddleware","initStore","store","runSaga","saga","run","stopSaga","dispatch","done","execSagaTasks","isServer","tasks","wrapper"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AAEA,OAAOC,oBAAP,IAA+BC,GAA/B,QAA0C,YAA1C;AAEA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,QAAP,MAAqB,SAArB;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACT,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOR,eAAe,CAAC,GAAGQ,UAAJ,CAAtB;AACD,CAND;;AAQA,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,MAAIA,MAAM,CAACC,IAAP,KAAgBb,OAApB,EAA6B;AAC3B,UAAMc,SAAS,mCACVH,KADU,GAEVC,MAAM,CAACG,OAFG,CAAf;;AAIA,WAAOD,SAAP;AACD,GAND,MAMO;AACL,WAAOV,WAAW,CAACO,KAAD,EAAQC,MAAR,CAAlB;AACD;AACF,CAVD,C,CAYA;;;AACA,MAAMI,cAAc,GAAGd,oBAAoB,EAA3C;;AAEA,MAAMe,SAAS,GAAG,MAAM;AACtB,QAAMC,KAAK,GAAGpB,WAAW,CAACY,OAAD,EAAUJ,cAAc,CAAC,CAACU,cAAD,CAAD,CAAxB,CAAzB;;AAEAE,EAAAA,KAAK,CAACC,OAAN,GAAgB,MAAM;AACpB;AACA,QAAID,KAAK,CAACE,IAAV,EAAgB;AAChBF,IAAAA,KAAK,CAACE,IAAN,GAAaJ,cAAc,CAACK,GAAf,CAAmBhB,QAAnB,CAAb;AACD,GAJD;;AAMAa,EAAAA,KAAK,CAACI,QAAN,GAAiB,YAAY;AAC3B;AACA,QAAI,CAACJ,KAAK,CAACE,IAAX,EAAiB;AACjBF,IAAAA,KAAK,CAACK,QAAN,CAAepB,GAAf;AACA,UAAMe,KAAK,CAACE,IAAN,CAAWI,IAAjB;AACAN,IAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;AACD,GAND;;AAQAF,EAAAA,KAAK,CAACO,aAAN,GAAsB,OAAOC,QAAP,EAAiBC,KAAjB,KAA2B;AAC/C;AACAT,IAAAA,KAAK,CAACC,OAAN,GAF+C,CAG/C;;AACAQ,IAAAA,KAAK,CAACT,KAAK,CAACK,QAAP,CAAL,CAJ+C,CAK/C;;AACA,UAAML,KAAK,CAACI,QAAN,EAAN,CAN+C,CAO/C;;AACA,QAAI,CAACI,QAAL,EAAe;AACbR,MAAAA,KAAK,CAACC,OAAN;AACD;AACF,GAXD,CAjBsB,CA8BtB;;;AACAD,EAAAA,KAAK,CAACC,OAAN;AAEA,SAAOD,KAAP;AACD,CAlCD;;AAoCA,OAAO,MAAMU,OAAO,GAAG3B,aAAa,CAACgB,SAAD,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\r\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\r\n\r\nimport createSagaMiddleware, { END } from \"redux-saga\";\r\n\r\nimport rootReducer from \"./reducers\";\r\nimport rootSaga from \"./sagas\";\r\n\r\nconst bindMiddleware = (middleware) => {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  if (action.type === HYDRATE) {\r\n    const nextState = {\r\n      ...state, // use previous state\r\n      ...action.payload, // apply delta from hydration\r\n    };\r\n    return nextState;\r\n  } else {\r\n    return rootReducer(state, action);\r\n  }\r\n};\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst initStore = () => {\r\n  const store = createStore(reducer, bindMiddleware([sagaMiddleware]));\r\n\r\n  store.runSaga = () => {\r\n    // Avoid running twice\r\n    if (store.saga) return;\r\n    store.saga = sagaMiddleware.run(rootSaga);\r\n  };\r\n\r\n  store.stopSaga = async () => {\r\n    // Avoid running twice\r\n    if (!store.saga) return;\r\n    store.dispatch(END);\r\n    await store.saga.done;\r\n    store.saga = null;\r\n  };\r\n\r\n  store.execSagaTasks = async (isServer, tasks) => {\r\n    // run saga\r\n    store.runSaga();\r\n    // dispatch saga tasks\r\n    tasks(store.dispatch);\r\n    // Stop running and wait for the tasks to be done\r\n    await store.stopSaga();\r\n    // Re-run on client side\r\n    if (!isServer) {\r\n      store.runSaga();\r\n    }\r\n  };\r\n\r\n  // Initial run\r\n  store.runSaga();\r\n\r\n  return store;\r\n};\r\n\r\nexport const wrapper = createWrapper(initStore);\r\n"]},"metadata":{},"sourceType":"module"}