{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from \"redux\";\nimport * as types from \"./types\";\nconst initialState = {\n  fetchProducts: {\n    data: null,\n    loading: false,\n    error: null\n  }\n};\n\nconst fetchProducts = (state = initialState.fetchProducts, action) => {\n  switch (action.type) {\n    case types.FETCH_PRODUCTS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: true,\n          data: null,\n          error: null\n        });\n      }\n\n    case types.FETCH_PRODUCTS_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          data: action.payload\n        });\n      }\n\n    case types.FETCH_PRODUCTS_FAILED:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          error: action.error\n        });\n      }\n\n    case types.FETCH_PRODUCTS_CLEAR:\n      {\n        return _objectSpread({}, initialState.fetchProducts);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const homeReducer = combineReducers({\n  fetchProducts\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/woodenculture/woodenculture-front-end/store-thunk/Home/reducers.js"],"names":["combineReducers","types","initialState","fetchProducts","data","loading","error","state","action","type","FETCH_PRODUCTS","FETCH_PRODUCTS_SUCCESS","payload","FETCH_PRODUCTS_FAILED","FETCH_PRODUCTS_CLEAR","homeReducer"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,IAAI,EAAE,IADO;AAEbC,IAAAA,OAAO,EAAE,KAFI;AAGbC,IAAAA,KAAK,EAAE;AAHM;AADI,CAArB;;AAQA,MAAMH,aAAa,GAAG,CAACI,KAAK,GAAGL,YAAY,CAACC,aAAtB,EAAqCK,MAArC,KAAgD;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,KAAK,CAACS,cAAX;AAA2B;AACzB,+CACKH,KADL;AAEEF,UAAAA,OAAO,EAAE,IAFX;AAGED,UAAAA,IAAI,EAAE,IAHR;AAIEE,UAAAA,KAAK,EAAE;AAJT;AAMD;;AACD,SAAKL,KAAK,CAACU,sBAAX;AAAmC;AACjC,+CACKJ,KADL;AAEEF,UAAAA,OAAO,EAAE,KAFX;AAGED,UAAAA,IAAI,EAAEI,MAAM,CAACI;AAHf;AAKD;;AACD,SAAKX,KAAK,CAACY,qBAAX;AAAkC;AAChC,+CACKN,KADL;AAEEF,UAAAA,OAAO,EAAE,KAFX;AAGEC,UAAAA,KAAK,EAAEE,MAAM,CAACF;AAHhB;AAKD;;AACD,SAAKL,KAAK,CAACa,oBAAX;AAAiC;AAC/B,iCACKZ,YAAY,CAACC,aADlB;AAGD;;AACD;AACE,aAAOI,KAAP;AA7BJ;AA+BD,CAhCD;;AAkCA,OAAO,MAAMQ,WAAW,GAAGf,eAAe,CAAC;AACzCG,EAAAA;AADyC,CAAD,CAAnC","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport * as types from \"./types\";\r\n\r\nconst initialState = {\r\n  fetchProducts: {\r\n    data: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n};\r\n\r\nconst fetchProducts = (state = initialState.fetchProducts, action) => {\r\n  switch (action.type) {\r\n    case types.FETCH_PRODUCTS: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        data: null,\r\n        error: null,\r\n      };\r\n    }\r\n    case types.FETCH_PRODUCTS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: action.payload,\r\n      };\r\n    }\r\n    case types.FETCH_PRODUCTS_FAILED: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.error,\r\n      };\r\n    }\r\n    case types.FETCH_PRODUCTS_CLEAR: {\r\n      return {\r\n        ...initialState.fetchProducts,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const homeReducer = combineReducers({\r\n  fetchProducts,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}