{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    return nextState;\n  } else {\n    return rootReducer(state, action);\n  }\n}; // create the saga middleware\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst initStore = () => {\n  const store = createStore(reducer, bindMiddleware([sagaMiddleware])); // then run the saga\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport const wrapper = createWrapper(initStore);","map":{"version":3,"sources":["/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/store/store.js"],"names":["createStore","applyMiddleware","HYDRATE","createWrapper","createSagaMiddleware","rootReducer","rootSaga","bindMiddleware","middleware","composeWithDevTools","require","reducer","state","action","type","nextState","payload","sagaMiddleware","initStore","store","run","wrapper"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,oBAAvC;AAEA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,QAAP,MAAqB,SAArB;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACR,eAAe,CAAC,GAAGO,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOP,eAAe,CAAC,GAAGO,UAAJ,CAAtB;AACD,CAND;;AAQA,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,MAAIA,MAAM,CAACC,IAAP,KAAgBZ,OAApB,EAA6B;AAC3B,UAAMa,SAAS,mCACVH,KADU,GAEVC,MAAM,CAACG,OAFG,CAAf;;AAIA,WAAOD,SAAP;AACD,GAND,MAMO;AACL,WAAOV,WAAW,CAACO,KAAD,EAAQC,MAAR,CAAlB;AACD;AACF,CAVD,C,CAYA;;;AACA,MAAMI,cAAc,GAAGb,oBAAoB,EAA3C;;AAEA,MAAMc,SAAS,GAAG,MAAM;AACtB,QAAMC,KAAK,GAAGnB,WAAW,CAACW,OAAD,EAAUJ,cAAc,CAAC,CAACU,cAAD,CAAD,CAAxB,CAAzB,CADsB,CAEtB;;AACAA,EAAAA,cAAc,CAACG,GAAf,CAAmBd,QAAnB;AACA,SAAOa,KAAP;AACD,CALD;;AAOA,OAAO,MAAME,OAAO,GAAGlB,aAAa,CAACe,SAAD,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\r\nimport { HYDRATE, createWrapper } from \"next-redux-wrapper\";\r\n\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport rootReducer from \"./reducers\";\r\nimport rootSaga from \"./sagas\";\r\n\r\nconst bindMiddleware = (middleware) => {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  if (action.type === HYDRATE) {\r\n    const nextState = {\r\n      ...state, // use previous state\r\n      ...action.payload, // apply delta from hydration\r\n    };\r\n    return nextState;\r\n  } else {\r\n    return rootReducer(state, action);\r\n  }\r\n};\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst initStore = () => {\r\n  const store = createStore(reducer, bindMiddleware([sagaMiddleware]));\r\n  // then run the saga\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nexport const wrapper = createWrapper(initStore);\r\n"]},"metadata":{},"sourceType":"module"}