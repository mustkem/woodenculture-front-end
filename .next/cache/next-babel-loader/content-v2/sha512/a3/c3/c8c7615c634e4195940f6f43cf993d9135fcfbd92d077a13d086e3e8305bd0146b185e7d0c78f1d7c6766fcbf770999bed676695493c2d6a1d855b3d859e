{"ast":null,"code":"import _regeneratorRuntime from \"/home/mustkeem/Documents/My Projects/all-projects/woodenculture/frontend/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(signup),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(getUserStatus),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(commonSagas);\n\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as types from \"./types\";\nimport { login as loginApi, signup as signupApi, getUserStatus as getUserStatusApi } from \"./api\"; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction login(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginApi, action.payload);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put({\n            type: types.LOGIN_SUCCESS,\n            payload: response\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: types.LOGIN_FAILED,\n            error: _context.t0 && _context.t0.message\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction signup(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function signup$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(signupApi, action.payload);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: types.SIGNUP_SUCCESS,\n            payload: response\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: types.SIGNUP_FAILED,\n            error: _context2.t0 && _context2.t0.message\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction getUserStatus(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function getUserStatus$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(getUserStatusApi, action.payload);\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: types.GET_USER_STATUS_SUCCESS,\n            payload: response\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: types.GET_USER_STATUS_FAILED,\n            error: _context3.t0 && _context3.t0.message\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\n\n\nexport default function commonSagas() {\n  return _regeneratorRuntime.wrap(function commonSagas$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(types.LOGIN, login);\n\n        case 2:\n          _context4.next = 4;\n          return takeLatest(types.SIGNUP, signup);\n\n        case 4:\n          _context4.next = 6;\n          return takeLatest(types.GET_USER_STATUS, getUserStatus);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":null,"metadata":{},"sourceType":"module"}